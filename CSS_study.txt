* CSS(Cascading Stylesheet)
: 연속적으로 스타일을 정의하는 문서. 태그와 태그가 중첩되어 연속적인 구조를 지닌 HTML문서에 스타일을 추가한다.
CSS3 버전을 주로 사용.
- Cascading : 계속되는 , 연속적인
- Style : 멋을 내다
- Sheet: (종이나 문서)한 장

* CSS 문법
: 다수의 '스타일 선언문'으로 구성된다.
ex)
선택자{
    속성명: 속성값;
}

- 선택자 : 어떤 요소에 스타일을 적용할 지에 대한 정보
- 중괄호{} : 선택한 요소에 적용할 스타일을 정의하는 영역
- 속성명 : 어떤 스타일을 정의하고 싶은지에 대한 정보
- 속성값 : 어떻게 정의하고 싶은지에 대한 정보

ex2)
p {
    color: red;
}

- 해석: p태그에 스타일을 정의한다. color라는 속성을 정의할 것인데 속성값으로는 red(빨간색 글자)를 원한다.

- 주석 사용법
ex) /* 내용 */

* CSS 문서
: 독립적으로 존재할 수는 있지만, HTML문서와 함께 사용하지 않는 CSS문서는 텍스트 문서에 불과하다.
CSS문서에 정의된 스타일이 웹 브라우저 화면을 통해 보여지도록 하기 위해서는 반드시 HTML문서의 작성이 먼저 이뤄져야한다.

* HTML문서에 CSS를 더하려면?
- 인라인 스타일 : 태그에 직접 기술하기. 태그에 style 속성을 추가하여 요소에 직접적으로 정의하는 방식. 따라서 선택자는 필요없다
                웹콘텐츠와 스타일시트를 분리하기 위해서는 사용하지 않는편이 좋다. 여러개의 스타일을 정의하려면 쌍따옴표가 끝나기전에 한칸띄우고 이어서 써주면된다.
                
ex)
<p style="color: blue;">
    글자를 파랗게 만들어줘
</p>

- 스타일 태그 : 스타일 시트를 위한 태그를 추가하여 기술하기. HTML문서에 <style>태그를 추가하여 그안에 css코드를 작성할 수 있다. '내부 스타일시트'라고 표현하기도 한다.
ex)
<style>
    p{color : red;}
</style>

- 문서간의 연결 : 스타일시트 문서를 따로 작성하여 HTML문서와 연결하기
    1. 확장자가 .css인 스타일시트 파일을 생성하고 css코드 작성
    2. <link>태그를 이용해 HTML문서에 연결하기

ex)
<link href="./style.css" rel="stylesheet">
href : 연결하고자하는 외부소스의 url을 기술하는 속성
rel : 현재 문서(HTML)와 외부 소스의 연관관계를 기술하는 속성

! <link> 태그는 HTML문서의 <head></head> 내부에 작성해야한다.
! 인라인 스타일은 다른 적용방법보다 우선적용된다. 인라인 스타일이 아닌 두가지 방법은 나중에 쓰여진 선언문이 적용된다.

* 선택자
: 스타일 선언문의 선택자를 어떻게 입력하는가에 따라 스타일이 적용될 요소가 결정된다.
이때, 요소는 오직 하나만 선택할 수도 있고, 여러개를 동시에 선택할 수도 있다.

* 선택자 유형
- 전체 선택자 : 문서내 모든 요소를 선택, * 기호 사용

- 태그 선택자 : 특정 태그로 만들어진 모든 요소를 선택, 태그명을 사용

- 클래스 선택자 : 특정 클래스 값이 지정된 모든 요소를 선택 
            .클래스값 으로 사용, .앞에 태그를 붙여서 어떤 태그의 클래스만 스타일을 정의할 수도 있다.

- 아이디 선택자 : 특정 아이디 값이 지정된 요소를 선택. 
            #아이디값 으로 사용, #앞에 태그를 붙여서 어떤 태그의 클래스만 스타일을 정의할 수도 있다.

- 그룹 선택자 : 여러 유형의 선택자를 한꺼번에 선택, 선택자를 나열하는 방식으로 사용

* 선택자 우선순위
1. 아이디 선택자
2. 클래스 선택자
3. 태그 선택자
4. 그룹 선택자
5. 전체 선택자

* 박스 모델(box model)
: 브라우저 화면은 가로와 세로를 축으로하는 2차원 공간. 따라서 브라우저를 통해 렌더링 되는 웹 요소들 또한 그 안에서 개별적으로 너비와 높이를 가진다.
박스 모델은 너비와 높이를 가지는 개별 요소를 가리켜 '박스'라고 표현하고, 박스를 네가지 세부영역으로 나누어 구분한 일종의 디자인 모델이다.
CSS로 스타일을 정의할 수 있는 모든요소에는 박스 모델 관련 속성 중 일부 또는 전부를 적용할 수 있으며, CSS는 영역 별로 크기를 따로 설정할 수 있도록 다양한 속성들을 제공한다.
개발자 도구를 이용하면 박스 모델 확인가능
개발자 도구 - Computed 탭

* 박스 모델의 세부 영역
- 콘텐츠 영역 : 요소 내에 포함된 콘텐츠를 표시하는 영역. 관련 속성으로는 width, height.
- 안쪽 여백 : 테두리 안에서 콘텐츠 주변을 감싸는 여백. 관련 속성으로는 padding
- 경계선(테두리) : 콘텐츠와 안쪽 여백을 둘러싸는 테두리. 관련속성으로는 border
- 바깥쪽 여백 : 테두리 바깥에서 요소를 감싸는 여백. 관련 속성으로는 margin

* 콘텐츠 영역의 크기 변경
:너비를 결정할 때는 width 속성을, 높이를 결정할 때는 height 속성을 사용한다.
두 속성은 모두 크기를 결정하기 위해 사용하는 속성이므로, 속성값을 결정할 때는 수치와 단위를 함께 입력해준다.
주로 픽셀(px)이나 퍼센티지(%)단위를 많이사용한다.
% 는 내가 속한 영역을 기준으로 백분율 계산한다. 선택자가 속한 영역에 관련 값이 있어야 적용가능하다. 
바디에 속한 요소들은 height: %; 해도 먹히지 않는다.

* 테두리
: 화면 상에서 요소가 차지하고 있는 공간을 뚜렷하게 표시해 다른 요소와 쉽게 구분할 수 있게 해주는 유용한 영역이다.

* 테두리 스타일의 정의
: 단축 속성인 border를 사용하거나 border의 하위속성을 사용한다.

- border-width : 테두리의 두께를 지정한다.
- border-style : 점선, 실선, 겹선 등으로 테두리의 모양을 지정한다.
- border-color : 테두리의 색상을 지정한다.
- border : 테두리의 두꼐 , 모양, 색상 등을 한번에 지정한다.

! 단축 속성이란?
: 하위 속성들을 한번에 지정할 수 있게해주는 속성이다.

- 요소의 모서리를 둥글게 만드는 법
: 테두리에는 4개의 모서리가 존재하는데, border-radius 속성을 이용하면 모서리를 둥글게 만들 수 있다.

* 여백
: 여백의 안쪽 바깥쪽 여부는 테두리를 기준으로 정해진다. 
테두리를 기준으로 안쪽에서 콘텐츠 영역을 감싸고 있으면 안쪽여백, 테두리 기준으로 바깥쪽이면 바깥쪽 여백이라 한다.

* 여백에 크기를 지정하는 방법
: 박스모델의 여백에는 네개의 면이 존재하는데, 속성값 사용 개수에 따라 네 면의 여백 크기를 달리 정할 수 있다.
이 방법은 안쪽여백과 바깥쪽여백의 사용법이 동일하다.

- 속성값 1개만 사용했을 때 : 여백의 모든 면에 동일한 값을 지정
ex) margin: 10px;
- 속성값 2개만 사용했을 때 : 위아래 여백과 왼오 여백의 값을 따로 지정
ex) margin: 10px 20px;
- 속성값 3개만 사용했을 때 : 윗쪽여백, 왼오여백, 아래쪽 여백 순서로 값을 지정
ex) margin: 10px 20px 15px;
- 속성값 4개를 사용했을 때 : 위쪽, 오른쪽, 아래쪽 , 왼쪽 순서로 값을 지정
ex) margin: 10px 20px 30px 40px;

- box-sizing
: width나 height를 사용하면 콘텐츠 영역의 크기를 결정할 수 있다. 
여기에 padding 속성을 추가로 정의하면 여백이 생기면서 요소가 기존보다 더 커지게 된다.
이를 원치 않을 경우에는 box-sizing 속성을 사용하여 내가 정해놓은 width나 height를 벗어나지 않게 할 수 있다.
box-sizing은 content-box나 border-box를 값으로 가질 수 있다.

- content-box를 값으로 쓸 경우
: width나 height가 콘텐츠 영역의 크기를 결정하고 여백이나 테두리가 추가되면 요소가 그대로 같이 커지는 효과가 있다.
box-sizing의 기본값으로 설정되어 있다.

- border-box를 값으로 쓸 경우
: width나 height가 안쪽 여백과 테두리까지의 크기를 포함해서 너비와 높이를 결정하게 된다.
whith와 height 안쪽에서 padding이 늘어나게되고 padding이 늘어날수록 콘텐츠 영역의 크기가 자동으로 좁아진다.

- padding
: 여백의 크기를 지정하는 속성. margin과 마찬가지로 속성값에 따라 값을 개별적으로 지정가능하다.

! padding이나 margin에 접미사 -top -right -left -bottom을 붙여서 각각의 여백크기를 지정해줄 수 있다.

* 박스에 배경추가하기
: 콘텐츠와 어울리는 적절한 배경을 추가함으로써 콘텐츠를 더욱 돋보이게 만들 수 있다.
박스 모델에 배경으로 추가된 색상이나 이미지 등은 박스 모델의 바깥쪽 여백을 제외한 나머지 영역 안에서 요소의 컨텐츠를 뒷받침한다.
background 단축속성으로 가능!

* background 하위 속성
- color : 요소의 배경색상 지정, 속성값으로 색상을 사용
- clip : 요소 내 배경의 적용범위, 어디에만 배경을 사용할건지, 속성값으로 별도의 키워드를 사용
        border-box, padding-box, content-box를 키워드로 사용
- image : 요소의 배경 이미지 지정, 속성값으로 이미지url 사용
- origin : 요소 내 배경의 시작위치를 지정,어디서부터 배경을 사용할건지, 속성값으로 별도의 워드를 사용
          border-box, padding-box, content-box를 키워드로 사용
- size : 배경의 이미지 크기를 지정, 속성값으로 수치와 단위를 사용
- position: 배경 이미지의 위치를 지정, 이미지가 박스 모델 영역보다 작은경우 이미지의 위치를 지정해줄 수 있다.속성값으로 수치와 단위를 사용
            top, bottom, left, right, center 로 속성값 지정가능
            속성값 조합을 통해 좌상단, 좌하단, 우상단, 우하단도, 왼쪽가운데, 오른쪽가운데 가능하다.
            left top , left bottom, right top, right bottom, left center, right center
            세부적으로 이미지 위치를 조정하고 싶을땐 수치와 단위로 조정이가능하다.
- repeat : 배경 이미지의 반복패턴을 지정, 속성값으로 별도의 키워드를 사용  

* 색상을 지정하는 방법 (color)
: 글자색을 지정할 때는 color 속성을 사용하며, 색 지정방법은 글자,테두리,배경 색 모두에 대해 동일하다.

- 키워드 : 색상을 나타내는 키워드(영단어)를 입력한다.
- rgb 함수 : rgb함수에 색상이 가진 고유의 값을 입력한다. rgb(a,b,c)
- hsl 함수 : hsl함수에 수치를 입력해 색상을 결정한다.
- 16진수 값 : 빨강, 초록, 파랑의 비율을 16진수로 표현해 색상을 결정한다.

* rgb 함수 사용법
: rgb 란 빛의 3원색인 red, green, blue의 줄임말이다. 
CSS는 빨강,초록,파랑 각 색상의 비율을 지정해 색상을 결정할 수 있는 rgb함수와 투명도를 추가 지정할 수 있는 rgba 함수를 각각 지원한다

- rgb(값1, 값2, 값3)
- rgba(값1, 값2, 값3, 값4)

!값 1,2,3 은 %를 주로 사용하고 값 4는 0~1 사이의 실수를 사용한다.

* hsl 함수 사용법
: hsl 함수는 색조(hue)와 채도(saturation), 조도(lightness)를 각각 지정해 색상을 결정하는 함수다.
투명도를 추가로 지정하고자 할때는 hsla함수를 사용한다.

- hsl(값1, 값2, 값3)
- hsla(값1, 값2, 값3, 값4)
!값 1에 해당하는 색조는 각도를 입력해 색상을 선택하는 항목이다. 색조표를 참고해야한다
!값 2는 채도에 해당하는 값을 입력,값 3 은 조도에 해당하는값을 입력, 값 4는 투명도로 0~1 사이의 실수를 사용한다.

* 16진수로 색상값을 사용하는 방법
: 색상을 지정할 때는 #(해시) 기호로 시작하는 여섯자리 16진수 값을 입력하는 방법을 사용하기도 한다.
이때 입력하는 16진수 값을 'RGB 색상 코드' 라고 부른다.

- RRGGBB
- RRGGBBAA

!opacity 라는 속성을 이용해서 투명도를 따로 지정할수도 있다.

* 글꼴바꾸기
: font-family 속성은 요소애 포함된 텍스트의 글꼴을 정의할 때 사용되는 속성이다.
한 개 이상의 글꼴을 지정할 수 있다. 입력한 글꼴 뒤에 쉼표를 입력한 후 새로운 글꼴을 이어서 입력하는 방식으로 속성값을 지정한다.
이 경우 가장 먼저 쓰여진 글꼴부터 우선적으로 요소에 적용된다.
ex)
p{
    font-family: Arial, Helvetica, sans-serif;
}

* 웹 폰트 사용하기
: 웹 폰트란 컴퓨터 시스템에 해당 폰트가 설치되어 있지 않은 경우에도 웹서버로 부터 이를 제공 받아 사용할 수 있는 '웹 전용 글꼴'을 뜻한다.
웹 폰트를 이용하면 font-family를 이용하여 글꼴 적용시 잘못 입력된 글꼴이거나 시스템에 설치되어 있지 않은 글꼴도 요소에 적용되어 사용 가능하다.

* 텍스트 꾸미기
- font-size : 글자 크기를 지정하며 수치와 단위를 속성값으로 한다.
- font-weight : 글자 두께를 지정하며 별도의 키워드를 속성값으로 한다.
- line-height : 행 높이를 지정하며 수치와 단위를 속성값으로 한다.
                폰트사이즈나 글꼴에 따라 영향을 받는다.
- text-align : 텍스트 정렬 방식을 지정하며 별도의 키워드를 속성값으로 한다.
                left(기본값), right, center, justify(양끝정렬)
- text-decoration : 텍스트에 줄을 긋는다. 별도의 키워드를 속성값으로 한다.


* 알아두면 좋은 단위
: 크기를 지정할 때는 수치와 단위를 함께 지정하곤 한다. 이는 글자 크기에 대해서도 마찬가지인데, 다음 두가지 단위를 알아두면 좋다
- rem : 루트 요소의 글자 크기를 배수로 계산해 적용하는 상대 단위
- em : 부모 요소의 글자 크기를 배수로 계산해 적용하는 상대 단위

- 부모요소와 루트요소?
: 태그는 중첩되어 사용이 가능한데 안쪽의 태그를 감싸고 있는 태그를 부모 요소라하고 부모 요소에 의해 감싸져 있는 태그를 루트 요소라 한다.

* display
: 요소를 블록과 인라인 요소 중 어느 쪽으로 처리할지 정의한다. 즉, 요소의 유형을 변경할 수 있다.
ex) 블록 레벨 요소인 div 요소를 인라인으로 처리하고 싶다면
div{ display: inline;}

ex) 인라인 요소인 a요소를 블록 레벨로 처리하고 싶다면
a{ display: block;}

* display 속성들
- none : 요소를 화면에 표시하지 않는다.
- block : 요소를 블록 레벨 요소로 만든다.
- inline : 요소를 인라인 요소로 만든다.
- inline-block : 요소를 인라인 요소로 표시하되, 블록 레벨의 특성을 추가한다. 즉, 자기가 필요한만큼의 공간만 쓰면서도 width나 height로 공간을 확장할 수 있다.

* 문서의 흐름 이해하기
: 웹 요소들이 화면에 표시되는 순서는 기본적으로 html 문서 내에서 태그가 쓰여진 순서를 따른다.
종이 위에 글을 쓸 때 왼쪽에서부터 오른쪽 방향으로 한 글자 한글자 써 나가고, 글자 수가 채워지면 위에서 부터 아애로 줄을 바꿔가며 써 내려가는 자연스러운 흐름에 따라 글을 쓰는 것처럼,
웹 브라우저가 화면 위에 요소를 표시할 때에도 마찬가지로 이를 처리하는 기본적인 흐름이 있다.

* float 속성
: 요소를 문서의 흐름에서 제외시킨 채 부모 요소 또는 루트 요소를 기준으로 위치를 변경한다.
선택된 요소가 문서의 흐름에서 제외되어 상위 요소의 왼쪽 또는 오른쪽 면에 붙는 형태로 배치되도록 하는 특징을 가지고 있다.
사용 가능한 속성값으로는 left, right, float을 적용하지 않음을 뜻하는 none이 있다.

float 속성을 적용한 요소를 '부동 요소'라 부른다. 부동 요소는 위치를 이동하면서 다른 요소의 공간까지 영향을 주는데, 이는 잘 활용하면 유용하나 float을 적용하지 않은 요소의 공간에 영향을 주어 때로는 역효과를 가져온다.
이러한 상황에 대응하기 위해 사용하는 속성으로 clear가 있다.

* clear
: 속성값으로 left, right, both 가 있는데 해당하는 값의 방향에 있는 float를 무시하겠다는 말이다.

* position
: 문서 상에 요소를 배치하는 방법을 정의한다. position이 요소의 배치방법을 결정하면, left, right, top, bottom 으로 최종위치를 결정한다.

- position : 난 이렇게 배치할거다.
- top : 윗면에서부터 얼마만큼 떨어뜨릴거다.
- bottom : 아랫면에서부터 얼마만큼 떨어뜨릴거다.
- left : 왼쪽면에서부터 얼마만큼 떨어뜨릴거다.
- right : 오른쪽면에서부터 얼마만큼 떨어뜨릴거다.

* position 속성값
- static : 기본값으로, 요소를 일반적인 문서의 흐름에 맞게 배치함
- relative : 문서의 흐름에 맞춰 배치된 자리를 기준으로 요소를 이동시킴
- absolute : position이 지정된 상위 요소를 기준으로 요소를 이동시킴. 이때 요소는 문서의 흐름에서 제외됨
            앱솔루트 요소는 position 속성을 가진 요소를 기준으로 위치를 이동한다. 단, 상위 요소 중에 position 속성을 가진 요소가 없다면 그냥 화면을 기준으로 이동한다.
- fixed : 화면을 기준으로 요소의 위치를 고정함.

* z-index
: 요소의 쌓임 순서(stack order)를 정의할 수 있다.
정수값을 지정하여 쌓임 맥락(stacking context)에서의 레벨을 정의하는 방식으로 적용되며, 위치 지정 요소에 대해 적용할 수 있는 방식이다.
동일한 위치에 요소들이 배치되면, 요소들은 z축에서 쌓이게된다.
z-index의 기본값은 auto이며, 정수 값으로 각 요소의 쌓임 순서를 결정한다.
z-index 속성은 position 속성이 static이 아닌 요소에 적용된다.
z-index 값이 클수록 요소는 다른 요소들보다 앞에 위치한다.
z-index는 음수 값을 가질 수 있다.

auto는 새로운 쌓임 맥락이 형성되지 않는 자연스러운 상태이다.
- 위치 지정 요소(positioned element)란?
: position 속성이 정의되어 있는 요소를 말한다.

* overflow
: 요소는 텍스트 또는 다른 요소를 자신의 콘텐츠로 가질 수 있고, 요소 내부의 콘텐츠 양이 많아질수록, 요소는 콘텐츠에 맞게 크기를 조절한다.
그러나 요소의 크기가 정해져 있는 상태에서 내부 콘텐츠의 크기보다 커지는 상황이 발생하면, 콘텐츠가 요소의 영역 밖으로 벗어나 버리는 '넘침현상'이 발생하기도 한다.
이러한 문제를 해결하기 위해서 사용하는 속성이다.

* overflow 속성값
- visible : 기본값으로, 영역을 벗어난 콘텐츠를 그대로 보여줌.
- hidden : 영역을 벗어난 콘텐츠를 잘라내어 보이지 않게 한다.
- scroll : 영역을 벗어난 콘텐츠를 잘라내어 보이지 않게 하고, 잘려진 콘텐츠 진행방향으로 스크롤을 만든다.
- auto : 웹 브라우저의 설정값을 따름. 데스크톱 브라우저에서는 주로 scroll로 처리함.

* 선택자 유형
: 앞서 학습한 선택자 외에도, css에는 요소가 가진 다양한 특성을 토대로 스타일을 적용할 수 있는 여러가지 방법이 존재한다.

- 속성 선택자 : 특정 속성을 명시하여 요소를 선택. [속성명]
! 기호와 함께 쓰는 속성 선택자
    * : 값의 포함 여부
    ^ : 값의 시작 여부
    $ : 값의 끝 여부
- 하위 요소 선택자 : 상위 요소에 포함된 하위 요소를 선택. 공백
- 자식 요소 선택자 : 상위 요소의 바로 한 단계 하위 요소를 선택. >
- 인접 형제 선택자 : 형제 요소 중 첫번째 형제 요소를 선택. +
- 형제 요소 선택자 : 형제 요소를 선택. ~
!형제 선택자 주의 사항
: 뒤에 이어지는 형제 선택자만 선택이 가능하다. 앞에 있는건 불가능!

* 의사클래스(가상클래스)
: 선택자에 추가하는 키워드로, 요소가 어떤 특정한 상태가 되었을 때 요소를 선택하겠다는 의미이다.

사용법)
선택자 : 의사클래스{
    속성명: 속성값;
}

* 의사클래스의 종류
- hover : 마우스 포인터가 요소에 올라가 있을때
- active : 사용자가 요소를 활성화 했을때 (마우스로 누르기 같은)
- focus : 요소가 포커스를 받고 있을때(요소를 바로 사용할 수 있는 상태)
- disabled : 비활성상태 요소일 때(요소를 사용할 수 없는 상태))
- nth-child(숫자) : 형제 사이에서의 순서에 따라 요소를 선택한다. 숫자대신 n을 넣으면 모든 형제 요소를 선택. 2n은 짝수번째, 2n-1은 홀수번째 형제요소 선택.

* 의사 요소(pseudo-elements)
: 선택자에 추가하는 키워드로, 이를 이용하면 선택한 요소의 특정 부분에 대한 스타일을 정의할 수 있다.

사용법)
선택자 :: 의사요소{
    속성명 : 속성값;
}

* 의사 요소의 속성값
- after : 요소의 앞에 의사 요소를 생성 및 추가한다.
- before : 요소의 뒤에 의사 요소를 생성 및 추가한다.
- first-line : 블록 레벨 요소의 첫번째 선에 스타일을 적용한다.
- marker : 목록 기호의 스타일을 적용한다.
- placeholder : 입력 요소의 플레이스홀더(자리표시자) 스타일을 적용한다.